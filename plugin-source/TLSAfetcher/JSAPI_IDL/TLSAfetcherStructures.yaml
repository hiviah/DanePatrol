## Class definitions for structures passed inbetween plugin<->javascript
## Class names should begin with a capital letter to avoid clash with keywords.

#Will generate output_basefname.cpp and output_basefname.h in current dir
output_basefname: TLSAfetcherStructures

# Optional includes that need to be inserted with "includefile.h" must have
# explicit apostrophes around, otherwise YAML will interpret it its string.
# (e.g. for including header with definition of a type)
#
#includes:
#    - '"APITypes.h"'

# Optional namespace, defaults to empty namespace.
namespace: TLSAjs

# enums must be toplevel so that we can export them to JS
enums:
    DNSSECStatus:
        - INSECURE: 0
        - SECURE
        - BOGUS
    
    CertUsage:
        - CA_CERT_PIN: 0
        - EE_CERT_PIN: 1
        - CA_TA_ADDED: 2
        - EE_TA_ADDED: 3
        
    MatchingType:
        - EXACT: 0
        - SHA256: 1
        - SHA512: 2
    
    Selector:
        - FULL: 0
        - SPKI: 1

    #bits for bitmask policy which CertUsage is allowed
    DANEPolicy:
        - ALLOW_TYPE_01: 1
        - ALLOW_TYPE_23: 2

ResolvedTLSA:
    certUsage: CertUsage
    selector: Selector
    matchingType: MatchingType
    association: string
    associationHex: string # JS or FB doesn't seem to like the null char

TLSALookupResult:
    result: int #0 - success, != 0 - failure, errorStr should have a reason
    errorStr: string
    rcode: int
    dnssecStatus: DNSSECStatus
    tlsa: list<ResolvedTLSA>

# One match of a certificate in chain against TLSA
DANEMatch:
    successful: bool #other fields are undefined unless successful==true
    abort: bool #true means that known bogus TLSA reply was on the wire
    errorStr: string #error message for abort or unsuccessful match
    derCert: string
    pemCert: string
    tlsa: ResolvedTLSA
